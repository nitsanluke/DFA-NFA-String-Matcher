
/*
 * nfaStringMatcher.java
 *
 * Created on Nov 12, 2010, 12:12:34 AM
 */
package finiteautomata;

import javax.swing.*;
import java.util.*;
import java.util.ArrayList;

/**
 *
 * @author Nitish
 */
public class nfaStringMatcher extends javax.swing.JFrame {

    static Object data[][];
    static String initialState;
    static String[] finalState;
    static String[] inputSymbols;
    // String[][] graph;
    static String[] input;
    JFrame frame;
    static ArrayList<String> emptyClosure;
    static ArrayList<String> moveState;
    static ArrayList<String> inputEdge;
    static ArrayList<String> sourceEdge;
    static ArrayList<String> targetEdge;
    static Stack newState;
    static Object dfaData[][];
    static ArrayList<String> dfaStates;
    static ArrayList<String> finalS;
    static String edgeTable[][];
    static Object dfaTable[][];

    /** Creates new form nfaStringMatcher */
    public nfaStringMatcher() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(finiteautomata.FiniteAutomataApp.class).getContext().getResourceMap(nfaStringMatcher.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jTextField1.setName("jTextField1"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        jMenuBar1.setName("String Matcher"); // NOI18N

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                jMenuItem1MenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName(resourceMap.getString("Form.AccessibleContext.accessibleName")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        String tmpInput[] = this.jTextField1.getText().split("");
        this.input = new String[tmpInput.length - 1];
        System.arraycopy(tmpInput, 1, this.input, 0, tmpInput.length - 1);


        Object currentNode = this.dfaTable[0][0];
        int currentNodeRow = 0;



        loop1:
        for (int a3 = 0; a3 < this.input.length; a3++) {

            loop2:
            for (int a4 = 0; a4 < this.inputSymbols.length; a4++) {


                if (this.input[a3].equalsIgnoreCase(this.inputSymbols[a4])) {

                    if (this.dfaTable[currentNodeRow][a4 + 1] != null && this.dfaTable[currentNodeRow][a4 + 1].toString() != "") {

                        currentNode = this.dfaTable[currentNodeRow][a4 + 1];
                        currentNodeRow = this.dfaStates.indexOf(currentNode);
                        //System.out.println("current Node "+ currentNode.toString());
                        break loop2;
                    }
                    if (this.dfaTable[currentNodeRow][a4 + 1] == null || this.dfaTable[currentNodeRow][a4 + 1].toString() == "") {
                        //if (!(this.finalS.contains(currentNode))) {
                            System.out.println("Trap State " + currentNode.toString());
                            currentNode = "Trap State";
                            currentNodeRow = -5;
                            break loop1;
                        //}
                    }

                }
            }
            if (currentNodeRow == -5) {
                break loop1;
            }
        }

        if (currentNodeRow == -5) {
            JOptionPane.showMessageDialog(frame, "String Not Acepted", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (this.finalS.contains(currentNode)) {
//System.out.println("aaaaa"+currentNode.toString());
            JOptionPane.showMessageDialog(frame, "String Accepted", "Message", JOptionPane.INFORMATION_MESSAGE);

        } else {
            //System.out.println("NNNN"+currentNode.toString());
            JOptionPane.showMessageDialog(frame, "String Not Acepted", "Message", JOptionPane.ERROR_MESSAGE);
        }


}//GEN-LAST:event_jButton1MouseClicked

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:
        String tmpInput[] = this.jTextField1.getText().split("");
        this.input = new String[tmpInput.length - 1];
        System.arraycopy(tmpInput, 1, this.input, 0, tmpInput.length - 1);


        Object currentNode = this.dfaTable[0][0];
        int currentNodeRow = 0;



        loop1:
        for (int a3 = 0; a3 < this.input.length; a3++) {

            loop2:
            for (int a4 = 0; a4 < this.inputSymbols.length; a4++) {


                if (this.input[a3].equalsIgnoreCase(this.inputSymbols[a4])) {

                    if (this.dfaTable[currentNodeRow][a4 + 1] != null && this.dfaTable[currentNodeRow][a4 + 1].toString() != "") {

                        currentNode = this.dfaTable[currentNodeRow][a4 + 1];
                        currentNodeRow = this.dfaStates.indexOf(currentNode);
                        System.out.println("current Node "+ currentNode.toString());
                        break loop2;
                    }
                    if (this.dfaTable[currentNodeRow][a4 + 1] == null || this.dfaTable[currentNodeRow][a4 + 1].toString() == "") {
                        if (!(this.finalS.contains(currentNode))) {
                            System.out.println("Trap State " + currentNode.toString());
                            currentNode = "Trap State";
                            currentNodeRow = -5;
                            break loop1;
                        }
                    }

                }
            }
            if (currentNodeRow == -5) {
                break loop1;
            }
        }

        if (currentNodeRow == -5) {
            JOptionPane.showMessageDialog(frame, "String Not Acepted", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (this.finalS.contains(currentNode)) {
//System.out.println("aaaaa"+currentNode.toString());
            JOptionPane.showMessageDialog(frame, "String Accepted", "Message", JOptionPane.INFORMATION_MESSAGE);

        } else {
            //System.out.println("NNNN"+currentNode.toString());
            JOptionPane.showMessageDialog(frame, "String Not Acepted", "Message", JOptionPane.ERROR_MESSAGE);
        }



}//GEN-LAST:event_jButton1KeyPressed

    public void convertNfaToDfa() {

        this.newState = new Stack();
        this.dfaStates = new ArrayList<String>();
        this.edgeTable = new String[this.inputSymbols.length][3];
        this.emptyClosure = new ArrayList<String>();
        this.moveState = new ArrayList<String>();
        this.inputEdge = new ArrayList<String>();
        this.sourceEdge = new ArrayList<String>();
        this.targetEdge = new ArrayList<String>();

        epsilonClosure(this.initialState);
        String eClosure = this.initialState;

        if (!emptyClosure.isEmpty()) {

            for (int h = 0; h < emptyClosure.size(); h++) {
                if (eClosure.equalsIgnoreCase("")) {
                    eClosure = emptyClosure.get(h);
                } else if (emptyClosure.get(h) != "") {

                    eClosure = eClosure + "," + emptyClosure.get(h);
                }
            }
        }

        // System.out.println("eeeeeeeee " + eClosure);
        newState.push(eClosure);
        dfaStates.add(eClosure);
        this.initialState = eClosure;
        this.emptyClosure.clear();

        while (!newState.isEmpty()) {

            String tempStates = newState.pop().toString();
            System.out.println("temp States  -" + tempStates + "-");
            for (int x0 = 0; x0 < this.inputSymbols.length; x0++) {

                moveState(tempStates, x0);
                String moveSt = "";

                if (!moveState.isEmpty()) {
                    for (int h = 0; h < moveState.size(); h++) {

                        if (moveSt == "") {
                            moveSt = moveState.get(h);
                        } else if (moveState.get(h) != "") {
                            moveSt = moveSt + "," + moveState.get(h);
                        }

                    }
                }

                String tmpMoveStates = moveSt;
                //System.out.println("MMMMMMMMMMMMMM  " + moveSt);

                this.moveState.clear();

                String EClosure = "";
                if (tmpMoveStates != "") {

                    epsilonClosure(tmpMoveStates);
                    EClosure = tmpMoveStates;
                    if (!emptyClosure.isEmpty()) {
                        for (int h = 0; h < emptyClosure.size(); h++) {

                            if (EClosure == "") {
                                EClosure = emptyClosure.get(h);
                            } else if (emptyClosure.get(h) != "") {
                                EClosure = EClosure + "," + emptyClosure.get(h);
                            }
                        }
                    }

                    if (!this.dfaStates.contains(EClosure)) {
                        //System.out.println("XXXXXXXXXX  " + EClosure);
                        this.newState.push(EClosure);
                        this.dfaStates.add(EClosure);

                    }

                    this.emptyClosure.clear();

                }
                this.inputEdge.add(this.inputSymbols[x0]);
                this.sourceEdge.add(tempStates);
                this.targetEdge.add(EClosure);

            }

        }

        for (int z2 = 0; z2 < this.targetEdge.size(); z2++) {

            System.out.println("--" + this.inputEdge.get(z2).toString() + "--" + this.sourceEdge.get(z2).toString() + "==" + this.targetEdge.get(z2).toString());

        }

        dfaTable = new Object[this.dfaStates.size()][this.inputSymbols.length + 1];



        for (int z4 = 0; z4 < this.dfaTable.length; z4++) {

            this.dfaTable[z4][0] = this.dfaStates.get(z4);

        }

        int k5 = 0;
        for (int z5 = 0; z5 < this.dfaTable.length; z5++) {


            k5 = this.sourceEdge.indexOf(this.dfaTable[z5][0]);

            for (int z6 = 1; z6 < this.dfaTable[0].length; z6++) {

                this.dfaTable[z5][z6] = this.targetEdge.get(k5);
                k5++;
            }
        }


        for (int z2 = 0; z2 < this.dfaTable.length; z2++) {
            for (int z3 = 0; z3 < this.dfaTable[0].length; z3++) {
                System.out.print("-(" + this.dfaTable[z2][z3].toString() + ")-");
            }
            System.out.println("");
        }

        //create finla states list
        this.finalS = new ArrayList<String>();

        for (int a0 = 0; a0 < this.dfaStates.size(); a0++) {

            for (int a1 = 0; a1 < this.finalState.length; a1++) {

                String tempS[] = this.dfaStates.get(a0).toString().split(",");
                for (int a2 = 0; a2 < tempS.length; a2++) {

                    if (tempS[a2].equalsIgnoreCase(this.finalState[a1])) {

                        this.finalS.add(this.dfaStates.get(a0).toString());
                        a1 = this.finalState.length;
                        break;
                    }
                }
            }

        }
        System.out.println("Final States");
        for (int a6 = 0; a6 < this.finalS.size(); a6++) {
            System.out.println("(" + this.finalS.get(a6) + ")");
        }


    }

    public String moveState(String states, int input) {

        String currentState = "";

        if (states.length() > 2) {

            String currentSt[] = states.split(",");
            for (int v1 = 0; v1 < currentSt.length; v1++) {

                //  String xtemp =
                moveState(currentSt[v1], input);
                //if (xtemp != null) {
                // this.moveState.add(xtemp);
                // }
            }
        } else if (states.length() == 2) {

            for (int v0 = 0; v0 < this.data.length; v0++) {

                if (states.equalsIgnoreCase(this.data[v0][0].toString())) {

                    if (this.data[v0][input + 1] != null) {

                        currentState = this.data[v0][input + 1].toString();
                        //System.out.println("mmmmmmmmmmmm  " + currentState);
                        if (currentState != "" && !(this.moveState.contains(currentState))) {
                            this.moveState.add(currentState);
                        }
                        return currentState;

                    }
                }
            }
        }
        return currentState;

    }

    public String epsilonClosure(String T) {

        String currentCell = T;

        if (T.length() > 2) {

            String currentCellS[] = T.split(",");
            for (int u0 = 0; u0 < currentCellS.length; u0++) {

                //String ytemp =
                epsilonClosure(currentCellS[u0]);

                // if(ytemp != null){ this.emptyClosure.add(ytemp);}
            }

        } else if (T.length() == 2) {

            for (int u = 0; u < this.data.length; u++) {


                if (T.equalsIgnoreCase(this.data[u][0].toString())) {

                    if (this.data[u][this.data[0].length - 1] != null) {

                        currentCell = this.data[u][this.data[0].length - 1].toString();

                        String ztemp = epsilonClosure(currentCell);
                        if (ztemp != "" && !(this.emptyClosure.contains(ztemp))) {
                            this.emptyClosure.add(ztemp);
                        }

                        // System.out.println("EEEEEEEEEEEEEE  " + currentCell);
                    }
                }

            }
        }
        return currentCell;

    }

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        convertedDfaGraph conGraph = new convertedDfaGraph();
        conGraph.sendData(this.dfaStates, this.sourceEdge, this.targetEdge, this.inputEdge, finalS, this.initialState);
        conGraph.genGraph();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
        // TODO add your handling code here:
        convertedDfaGraph conGraph = new convertedDfaGraph();
        conGraph.sendData(this.dfaStates, this.sourceEdge, this.targetEdge, this.inputEdge, finalS, this.initialState);
        conGraph.genGraph();
    }//GEN-LAST:event_jButton2KeyPressed

    private void jMenuItem1MenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_jMenuItem1MenuKeyPressed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItem1MenuKeyPressed

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_jMenuItem1MouseClicked

    public void sendGraph(Object data[][], String initialState, String finalState, String inputSymbols) {

        String temp[] = inputSymbols.split("");
        this.inputSymbols = new String[temp.length - 2];
        this.data = new Object[data.length][data[0].length];

        System.arraycopy(data, 0, this.data, 0, data.length);

        String tempFinalStates[] = finalState.split(",");
        //System.out.println(tempFinalStates[0]);
        this.finalState = new String[tempFinalStates.length];
        System.arraycopy(tempFinalStates, 0, this.finalState, 0, tempFinalStates.length);
        this.initialState = initialState;

        System.arraycopy(temp, 1, this.inputSymbols, 0, temp.length - 2);

        convertNfaToDfa();
    }

    /**
     * @param args the command line arguments
     */
    public void check() {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new nfaStringMatcher().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
